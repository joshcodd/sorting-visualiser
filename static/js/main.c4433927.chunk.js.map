{"version":3,"sources":["components/Slider/Slider.jsx","components/SidebarButton/SidebarButton.jsx","components/Sidebar/Sidebar.jsx","components/SortingBar/SortingBar.jsx","components/Visualiser/Visualiser.jsx","components/Visualiser/quickSort.js","components/Visualiser/bubbleSort.js","components/Visualiser/mergeSort.js","components/Visualiser/insertionSort.js","components/App.jsx","serviceWorker.js","index.js"],"names":["Slider","props","value","className","type","min","max","id","onChange","currentAlgorithm","event","target","onMouseUp","SidebarButton","text","onClick","action","Sidebar","useState","sliderValue","setSliderValue","handleSortButton","onSortButtonPress","onReset","SortingBar","heightStyle","height","marginLeft","margin","width","style","Visualiser","numOfBars","bars","length","barsWidth","map","barHeight","index","key","timeLine","quickSort","array","sortingArray","quickSortMain","low","high","pivot","i","j","push","swap","partition","rightLow","temp","bubbleSort","mergeSort","mergeSortMain","mid","Math","floor","merge","tempArray","k","insertionSort","App","setBars","setCurrentAlgorithm","generateArray","arrayBars","document","getElementsByClassName","barsArray","randomBarSize","random","wait","ms","Promise","resolve","setTimeout","searchType","a","barsChangeTransition","sortedArray","mergeResult","barOneIndex","barTwoIndex","newHeight","barOne","barTwo","background","bubbleResult","heightOne","HeightTwo","quickResult","pivotIndex","barIndex","insertionResult","alert","useEffect","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.c4433927.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction Slider(props) {\n  let value = props.value;\n\n  function handleChange(event) {\n    props.onChange(event.target.value);\n  }\n\n  function handleOnMouseUp(event) {\n    props.onMouseUp(event.target.value);\n  }\n\n  return (\n    <div className=\"sliderContainer\">\n      <label className=\"sliderTitle\">Collection Size</label>\n      <input\n        type=\"range\"\n        min=\"5\"\n        max=\"100\"\n        className=\"slider\"\n        id=\"myRange\"\n        onChange={props.currentAlgorithm === \"\" ? handleChange : null}\n        onMouseUp={props.currentAlgorithm === \"\" ? handleOnMouseUp : null}\n        value={value}\n      />\n      <output className=\"sliderOutput\"> {value} </output>\n    </div>\n  );\n}\n\nexport default Slider;\n","import React from \"react\";\n\nfunction SidebarButton(props) {\n  let currentAlgorithm = props.currentAlgorithm;\n\n  function handleClick(event) {\n    if (currentAlgorithm === \"\") {\n      props.action(event.target.value);\n    }\n  }\n\n  return (\n    <button\n      className={\n        (currentAlgorithm === props.text ? \"btn btn-active \" : \"btn \") +\n        props.className\n      }\n      onClick={handleClick}\n      value={props.text}\n    >\n      {props.text}\n    </button>\n  );\n}\n\nexport default SidebarButton;\n","import React, { useState } from \"react\";\nimport \"./sidebar.css\";\nimport Slider from \"../Slider/Slider\";\nimport SidebarButton from \"../SidebarButton/SidebarButton\";\n\nfunction Sidebar(props) {\n  const [sliderValue, setSliderValue] = useState(50);\n\n  function handleSortButton(value) {\n    props.onSortButtonPress(value);\n  }\n\n  function handleResetButton() {\n    props.onReset(sliderValue);\n  }\n\n  function handleSliderOnMouseUp(value) {\n    props.onReset(value);\n  }\n\n  function handleSliderChange(value) {\n    setSliderValue(value);\n  }\n\n  return (\n    <div className=\"sidebar\">\n      <h1> Sorting Visualiser </h1>\n      <p> Pick a sorting algorithm</p>\n      <SidebarButton\n        text=\"Insertion\"\n        action={handleSortButton}\n        currentAlgorithm={props.currentAlgorithm}\n      />\n      <SidebarButton\n        text=\"Bubble\"\n        action={handleSortButton}\n        currentAlgorithm={props.currentAlgorithm}\n      />\n      <SidebarButton\n        text=\"Quick\"\n        action={handleSortButton}\n        currentAlgorithm={props.currentAlgorithm}\n      />\n      <SidebarButton\n        text=\"Merge\"\n        action={handleSortButton}\n        currentAlgorithm={props.currentAlgorithm}\n        className=\"btn-last\"\n      />\n      <SidebarButton\n        text=\"Reset\"\n        action={handleResetButton}\n        currentAlgorithm={props.currentAlgorithm}\n      />\n      <Slider\n        value={sliderValue}\n        currentAlgorithm={props.currentAlgorithm}\n        onChange={handleSliderChange}\n        onMouseUp={handleSliderOnMouseUp}\n      />\n    </div>\n  );\n}\n\nexport default Sidebar;\n","import React from \"react\";\nimport \"./sortingbar.css\";\nimport \"../Visualiser/visualiser.css\";\n\nfunction SortingBar(props) {\n  const heightStyle = {\n    height: props.height,\n    marginLeft: props.margin,\n    width: props.width,\n    //background: \"linear-gradient(0.4turn, #64ffda, #64ff8d)\",\n  };\n\n  return <div className=\"bar\" style={heightStyle}></div>;\n}\n\nexport default SortingBar;\n","import React from \"react\";\nimport \"./visualiser.css\";\nimport SortingBar from \"../SortingBar/SortingBar\";\n\nfunction Visualiser(props) {\n  const numOfBars = props.bars.length;\n  const barsWidth = 9800 / numOfBars;\n  const margin = 200 / numOfBars;\n\n  return (\n    <div className=\"visualiser\">\n      <div className=\"container\">\n        {props.bars.map((barHeight, index) => {\n          return (\n            <SortingBar\n              key={index}\n              height={barHeight}\n              width={barsWidth}\n              margin={margin}\n            />\n          );\n        })}\n      </div>\n    </div>\n  );\n}\n\nexport default Visualiser;\n","//Referenced: https://www.geeksforgeeks.org/quick-sort/\n//Function(s) to take in an array and return :\n// - A timeLine, I.E an array of 3 values. 1: pivot, 2: index of bar and 3: bar height to set.\n// - The sorted array\nconst timeLine = [];\n\n//Function to call the recursive quickSortMain and return the needed values to the app component.\nexport default function quickSort(array) {\n  timeLine.length = 0; //clear array\n  const sortingArray = [...array];\n  quickSortMain(sortingArray, 0, sortingArray.length - 1);\n  return { timeLine: timeLine, bars: sortingArray };\n}\n\n//Recursive quicksort function, selects pivot and quicksorts either side of pivot.\nfunction quickSortMain(sortingArray, low, high) {\n  if (low < high) {\n    let pivot = partition(sortingArray, low, high);\n    let leftHigh = pivot - 1;\n    let rightLow = pivot + 1;\n\n    quickSortMain(sortingArray, low, leftHigh);\n    quickSortMain(sortingArray, rightLow, high);\n  }\n}\n\n//Places pivot at last index of array section and then moves all elements > to the right of it,\n// and all elements < to the left of it.\nfunction partition(sortingArray, low, high) {\n  let pivot = high;\n  let i = low - 1;\n\n  for (let j = low; j < high; j++) {\n    if (sortingArray[j] < sortingArray[pivot]) {\n      i++;\n      //swap and push elements to swap, to the timeLine.\n      timeLine.push([pivot, j, sortingArray[i]]);\n      timeLine.push([pivot, i, sortingArray[j]]);\n      swap(sortingArray, i, j);\n    }\n  }\n\n  //Move pivot to correct position\n  timeLine.push([pivot, i + 1, sortingArray[pivot]]);\n  timeLine.push([pivot, pivot, sortingArray[i + 1]]);\n  swap(sortingArray, i + 1, high);\n  pivot = i + 1;\n\n  return pivot;\n}\n\n//Function that takes an array, and two index. Elements at index are swapped over.\nfunction swap(array, i, j) {\n  let temp = array[i];\n  array[i] = array[j];\n  array[j] = temp;\n}\n","//Function to take in an array and return :\n// - A timeLine, I.E an array of pairs where the two values are the index of bars to be swapped in\n//   order to visualise a bubble sort step by step.\n// - The sorted array\nconst timeLine = [];\nexport default function bubbleSort(array) {\n  timeLine.length = 0; //clear array\n  const sortingArray = [...array];\n  for (let i = 0; i < sortingArray.length; i++) {\n    for (let j = 0; j < sortingArray.length; j++) {\n      // If value after current is greater, swap values and add swap to timeLine.\n      if (sortingArray[j] >= sortingArray[j + 1]) {\n        timeLine.push([j, j + 1, sortingArray[j], sortingArray[j + 1]]);\n        swap(sortingArray, j, j + 1);\n      }\n    }\n  }\n  return { timeLine: timeLine, bars: sortingArray };\n}\n\n//Function that takes an array, and two index. Elements at index are swapped over.\nfunction swap(array, i, j) {\n  let temp = array[i];\n  array[i] = array[j];\n  array[j] = temp;\n}\n","//Function(s) to take in an array and return :\n// - A timeLine, I.E an array of 3 values. 1: pivot, 2: index of bar and 3: bar height to set.\n// - The sorted array\nconst timeLine = [];\n\n//Function to call the recursive mergesortMain and return the needed values to the app component.\nexport default function mergeSort(array) {\n  timeLine.length = 0; //clear array\n  const sortingArray = [...array];\n\n  mergeSortMain(sortingArray);\n  return { timeLine: timeLine, bars: sortingArray };\n}\n\n//Main merge sort function, recursively splits array into smaller sections, then merges together.\nfunction mergeSortMain(sortingArray, low = 0, high = sortingArray.length - 1) {\n  if (low < high) {\n    const mid = Math.floor((low + high) / 2);\n    mergeSortMain(sortingArray, low, mid);\n    mergeSortMain(sortingArray, mid + 1, high);\n    merge(sortingArray, low, high);\n  }\n}\n\n//Merge split arrays back together\nfunction merge(sortingArray, low, high) {\n  let tempArray = [];\n  //i left index, j right index\n  let i = low;\n  let k = low;\n\n  let mid = Math.floor((low + high) / 2);\n  let j = mid + 1;\n\n  while (i <= mid && j <= high) {\n    if (sortingArray[i] <= sortingArray[j]) {\n      timeLine.push([k, i, sortingArray[i]]);\n      tempArray[k++] = sortingArray[i++];\n    } else {\n      timeLine.push([k, j, sortingArray[j]]);\n      tempArray[k++] = sortingArray[j++];\n    }\n  }\n\n  while (i <= mid) {\n    timeLine.push([k, i, sortingArray[i]]);\n    tempArray[k++] = sortingArray[i++];\n  }\n\n  while (j <= high) {\n    timeLine.push([k, j, sortingArray[j]]);\n    tempArray[k++] = sortingArray[j++];\n  }\n\n  for (let i = low; i < k; i++) {\n    sortingArray[i] = tempArray[i];\n  }\n}\n","//Function to take in an array and return :\n// - A timeLine, I.E an array of pairs where the two values are the index of bars to be swapped in\n//   order to visualise a insertion sort step by step.\n// - The sorted array\nlet timeLine = [];\nexport default function insertionSort(array) {\n  timeLine.length = 0; //clear array\n  let sortingArray = [...array];\n  for (let i = 1; i < sortingArray.length; i++) {\n    let key = sortingArray[i];\n    let j = i - 1;\n\n    while (j >= 0 && sortingArray[j] > key) {\n      sortingArray[j + 1] = sortingArray[j];\n      timeLine.push([j + 1, sortingArray[j]]);\n      j = j - 1;\n    }\n    sortingArray[j + 1] = key;\n    timeLine.push([j + 1, key]);\n  }\n  return { timeLine: timeLine, bars: sortingArray };\n}\n","import React, { useState, useEffect } from \"react\";\nimport Sidebar from \"./Sidebar/Sidebar\";\nimport Visualiser from \"./Visualiser/Visualiser\";\nimport quickSort from \"./Visualiser/quickSort\";\nimport bubbleSort from \"./Visualiser/bubbleSort\";\nimport mergeSort from \"./Visualiser/mergeSort\";\nimport insertionSort from \"./Visualiser/insertionSort\";\n\nfunction App() {\n  let [bars, setBars] = useState([]);\n  let [currentAlgorithm, setCurrentAlgorithm] = useState(\"\");\n\n  //Generate and return array of random values (bar heights)\n  function generateArray(numOfBars) {\n    //Add transition class for array reset animations.\n    const arrayBars = document.getElementsByClassName(\"bar\");\n    while (arrayBars.length > 0) {\n      arrayBars[0].className = \"bar-trans\";\n    }\n\n    const barsArray = [];\n    for (let i = 0; i < numOfBars; i++) {\n      const randomBarSize = Math.floor(Math.random() * 500);\n      barsArray.push(randomBarSize);\n    }\n    setBars(barsArray);\n  }\n\n  //Generate array on load.\n  useEffect(() => {\n    generateArray(50);\n  }, []);\n\n  //delay\n  function wait(ms) {\n    return new Promise((resolve) => setTimeout(resolve, ms));\n  }\n\n  async function handleTimeline(searchType) {\n    //Remove transition class from classname.\n    const barsChangeTransition = document.getElementsByClassName(\"bar-trans\");\n    while (barsChangeTransition.length > 0) {\n      barsChangeTransition[0].className = \"bar\";\n    }\n\n    setCurrentAlgorithm(searchType);\n    let timeLine = [];\n    let sortedArray = [];\n    const arrayBars = document.getElementsByClassName(\"bar\");\n\n    switch (searchType) {\n      case \"Merge\":\n        const mergeResult = mergeSort(bars);\n        timeLine = mergeResult.timeLine;\n        sortedArray = mergeResult.bars;\n\n        for (let i = 0; i < timeLine.length; i++) {\n          const [barOneIndex, barTwoIndex, newHeight] = timeLine[i];\n          const barOne = arrayBars[barOneIndex].style;\n          const barTwo = arrayBars[barTwoIndex].style;\n          barOne.height = `${newHeight}px`;\n          barOne.background = \"red\";\n          barTwo.background = \"red\";\n          await wait(50);\n          barOne.background = \"\";\n          barTwo.background = \"\";\n        }\n        break;\n\n      case \"Bubble\":\n        const bubbleResult = bubbleSort(bars);\n        timeLine = bubbleResult.timeLine;\n        sortedArray = bubbleResult.bars;\n\n        for (let i = 0; i < timeLine.length; i++) {\n          const [barOneIndex, barTwoIndex, heightOne, HeightTwo] = timeLine[i];\n          const barOne = arrayBars[barOneIndex].style;\n          const barTwo = arrayBars[barTwoIndex].style;\n          barOne.height = `${HeightTwo}px`;\n          barTwo.height = `${heightOne}px`;\n          barOne.background = \"red\";\n          barTwo.background = \"red\";\n          await wait(50);\n          barOne.background = \"\";\n          barTwo.background = \"\";\n        }\n        break;\n\n      case \"Quick\":\n        const quickResult = quickSort(bars);\n        timeLine = quickResult.timeLine;\n        sortedArray = quickResult.bars;\n\n        for (let i = 0; i < timeLine.length; i++) {\n          const [pivotIndex, barIndex, barHeight] = timeLine[i];\n          const barOne = arrayBars[barIndex].style;\n          const pivot = arrayBars[pivotIndex].style;\n          barOne.height = `${barHeight}px`;\n          barOne.background = \"red\";\n          pivot.background = \"yellow\";\n          await wait(50);\n          barOne.background = \"\";\n          pivot.background = \"\";\n        }\n        break;\n\n      case \"Insertion\":\n        const insertionResult = insertionSort(bars);\n        timeLine = insertionResult.timeLine;\n        sortedArray = insertionResult.bars;\n\n        for (let i = 0; i < timeLine.length; i++) {\n          const [barIndex, barHeight] = timeLine[i];\n          const barOne = arrayBars[barIndex].style;\n          barOne.height = `${barHeight}px`;\n          barOne.background = \"red\";\n          await wait(50);\n          barOne.background = \"\";\n        }\n        break;\n\n      default:\n        alert(\"There has been an error please refresh\");\n        break;\n    }\n    setCurrentAlgorithm(\"\");\n    setBars(sortedArray);\n  }\n\n  return (\n    <div>\n      <Sidebar\n        onReset={generateArray}\n        onSortButtonPress={handleTimeline}\n        currentAlgorithm={currentAlgorithm}\n      />\n      <Visualiser bars={bars} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"./index.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}